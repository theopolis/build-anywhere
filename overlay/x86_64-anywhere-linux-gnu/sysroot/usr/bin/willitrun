#!/usr/bin/env python

import sys
import os
import subprocess
import re

ALLOWED_LIBS=[
    'libdl.so.2',
    'libz.so.1',
    'libm.so.6',
    'libpthread.so.0',
    'librt.so.1',
    'libc.so.6',
    'libresolv.so.2',
]

ALLOWED_MIMES=[
    'application/x-executable',
    'application/x-sharedlib',
]

def usage(ret):
    print('''Usage: %s PATH...
Check if PATH will run anywhere.

  PATH\t This should be either a binary or shared library.''' % (sys.argv[0]))
    sys.exit(ret)

def problem(bin, type):
    '''Outputs a problem'''
    print >> sys.stderr, u'\u2718 ',
    print("%s: %s: no" % (bin, type))
    return False

def check_ldd(bin, ldd):
    '''Checks the output of given ldd stdout'''
    libs = []
    versions = []

    lines = [line.strip() for line in ldd.split("\n") if len(line.strip()) > 1]
    i = 0
    while i < len(lines):
        if lines[i] == 'Version information:':
            i += 2
            break
        libs.append(lines[i].split(' => '))
        i += 1
    while i < len(lines):
        if lines[i][-1] == ':':
            break
        versions.append(lines[i].split(' => '))
        i += 1

    for lib in libs:
        if len(lib) != 2:
            continue
        if lib[1].find('unknown') >= 0:
            return problem(bin, "library not found: %s" % (lib[0]))
        if lib[0] not in ALLOWED_LIBS:
            return problem(bin, "library linked is not allowed: %s" % (lib[0]))

    for version in versions:
        if version[0].find("GLIBC_PRIVATE") >= 0:
            continue
        glibc = re.search(r'(.*) \(GLIBC_(\d)\.(\d)[\.]{0,1}(\d)?\)', version[0])
        lib, high, med, low = glibc.groups()
        if high is None or int(high) > 2:
            return problem(bin, "linkage for %s is not GLIBC 2.12 or lower" % (version[0]))
        if med is None or int(med) > 12:
            return problem(bin, "linkage for %s is not GLIBC 2.12 or lower" % (version[0]))
    return True

if __name__ == '__main__':
    if len(sys.argv) <= 1:
        usage(1)

    for path in sys.argv[1:]:
        if not os.path.exists(path):
            print("Path does not exist: %s" % (path))
            usage(1)

        bin = os.path.realpath(path)
        magic = subprocess.check_output(['file', '-b', '--mime-type','%s' % (bin)])
        if magic.strip() not in ALLOWED_MIMES:
            continue
        try:
            ldd = subprocess.check_output(['ldd', '-v', '%s' % (bin)])
        except subprocess.CalledProcessError as e:
            print >> sys.stderr, u'\u2718 ',
            print("%s: unknown" % (bin))
            continue
        if check_ldd(bin, ldd):
            print >> sys.stderr, u'\u2713 ',
            print("%s: yes" % bin)
